pub type Vector = struct {
    x: f64,
    y: f64,
}

# ---- INITS ---- #
pub fun vec2(x: f64, y: f64): Vector {
    ret Vector {
        x = x,
        y = y,
    };       
}

pub fun vec2_zeros(): Vector {
    ret Vector {
        x = 0.0,
        y = 0.0,
    };       
}

pub fun vec2_X(): Vector {
    ret Vector {
        x = 1.0,
        y = 0.0,
    };       
}

pub fun vec2_Y(): Vector {
    ret Vector {
        x = 0.0,
        y = 1.0,
    };       
}

# ---- UTILITIES ---- #

pub fun vec2_set(vec: Vector, x: f64, y: f64){
    vec.x = x;
    vec.y = y;
}

# TODO: importar o hacer la funcion sqrt()
pub fun vec2_len(vec: Vector): f64 {
    # ret sqrt(vec.x*vec.x + vec.y*vec.y)
}

pub fun vec2_scale(vec: Vector, s: f64) {
    vec.x = vec.x * s;
    vec.y = vec.y * s;
}

# AVISO: no funciona porque vec2_len no va
pub fun vec2_normal(vec: Vector){
    let len = vec2_len(vec);
    if len > 0.0 {
        vec.x = vec.x / len;
        vec.y = vec.y / len;
    }
}

pub fun vec2_max(vec: Vector): f64 {
    let max = 0.0;
        if vec.x > vec.y {
            max = vec.x;
        } else {
            max = vec.y;
        }
        ret max;
}

pub fun vec2_min(vec: Vector): f64 {
        let min = 0.0;
        if vec.x > vec.y {
            min = vec.y;
        } else {
            min = vec.x;
        }
        ret min;
}

pub fun vec2_copy(vec: Vector): Vector {
    ret Vector {
        x = vec.x,
        y = vec.y,
    };
}

pub fun vec2_eq(v1: Vector, v2: Vector): bool {
    if v1.x == v2.x && v1.y == v2.y {
        ret true;
    }
    ret false;
}

# AVISO: cos y sin functions no estan importadas
pub fun vec2_rotate(vec: Vector, a: i64){
    #vec.x = vec.x*cos(a) - vec.y*sin(a);
    #vec.y = vec.x*sin(a) - vec.y*cos(a);
}

# ---- OPERATORS ---- #

pub fun vec2_add(v1: Vector, v2: Vector): Vector {
    ret Vector {
        x = v1.x + v2.x,
        y = v1.y + v2.y,
    };
}

pub fun vec2_sub(v1: Vector, v2: Vector): Vector {
    ret Vector {
        x = v1.x - v2.x,
        y = v1.y - v2.y,
    };
}

pub fun vec2_dot(v1: Vector, v2: Vector): f64 {
        ret v1.x*v2.x + v1.y*v2.y;
}

pub fun vec2_cross(v1: Vector, v2: Vector): f64 {
        ret v1.x*v2.y - v1.y*v2.x;
}

pub fun vec2_mul(v1: Vector, v2: Vector): Vector {
    ret Vector {
        x = v1.x * v2.x,
        y = v1.y * v2.y,
    };
}

pub fun vec2_div(v1: Vector, v2: Vector): Vector {
    ret Vector {
        x = v1.x / v2.x,
        y = v1.y / v2.y,
    };
}



